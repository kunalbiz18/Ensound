name: Build Windows exe 
on: workflow_dispatch
  
jobs:

  build-windows-exe:
    runs-on: windows-latest
    
    steps:
      - uses: actions/checkout@v3
      - uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '3.24.2'

      - name: Enable Windows desktop
        run: flutter config --enable-windows-desktop

      - name: Pub get
        working-directory: "${{ github.workspace }}"
        run: flutter pub get

      - name: Update lang data
        working-directory: "${{ github.workspace }}"
        run: dart localization/generator.dart

      - name: Set update check flag to true
        working-directory: "${{ github.workspace }}/lib/utils"
        run: echo "const updateCheckFlag = true;" > update_check_flag_file.dart
        
      - name: Build windows exe package
        working-directory: "${{ github.workspace }}"
        run: |
          flutter clean
          flutter build windows --release
          # Optional: distributor packaging (does not block)
          dart pub global activate flutter_distributor
          flutter_distributor package --platform windows --targets exe || echo "flutter_distributor failed or skipped"

      - name: Locate built Windows artifacts
        id: find_exe
        run: |
          $releaseDir = "${{ github.workspace }}\build\windows\x64\runner\Release"
          if (-Not (Test-Path $releaseDir)) {
            Write-Error "Release directory not found: $releaseDir"
            exit 1
          }
          $exeFile = Get-ChildItem -Path $releaseDir -Filter *.exe -File -Recurse | Sort-Object LastWriteTime -Descending | Select-Object -First 1
          if ($exeFile) {
            Write-Host "Found built exe: $($exeFile.FullName)"
            "exe_path=$($exeFile.FullName)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            "release_dir=$releaseDir" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          } else {
            Write-Error "No .exe files found in $releaseDir"
            exit 1
          }
          
      - name: Set up osslsigncode
        run: |
          Invoke-WebRequest -Uri "https://github.com/mtrojnar/osslsigncode/releases/download/2.9/osslsigncode-2.9-windows-x64-mingw.zip" -OutFile "osslsigncode.zip"
          Expand-Archive -Path "osslsigncode.zip" -DestinationPath "osslsigncode"
          Add-Content -Path $env:GITHUB_PATH -Value "${{ github.workspace }}\osslsigncode"
      
      - name: Make signing dir
        working-directory: "${{ github.workspace }}"
        run: mkdir signed

      - name: Collecting certs and key
        if: ${{ secrets.KEY_PEM != '' }}
        working-directory: "${{ github.workspace }}/signed"
        run: |
          [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("${{ secrets.KEY_PEM }}")) | Out-File -FilePath key.pem -Encoding ASCII
          cp "${{ github.workspace }}/win_cert/DigiCertGlobalRootCA.crt" .
          cp "${{ github.workspace }}/win_cert/cert.pem" .

      - name: Sign executable
        if: ${{ secrets.KEY_PEM != '' }}
        working-directory: "${{ github.workspace }}/signed"
        run: |
          $exePath = "${{ steps.find_exe.outputs.exe_path }}"
          $signedExePath = "$exePath".Replace(".exe", "_signed.exe")
          & "${{ github.workspace }}/osslsigncode/bin/osslsigncode.exe" sign -certs cert.pem -key key.pem -t http://timestamp.digicert.com -in "$exePath" -out "$signedExePath"

      - name: Verify signature
        if: ${{ secrets.KEY_PEM != '' }}
        working-directory: "${{ github.workspace }}/signed"
        run: |
          $signedExePath = "${{ steps.find_exe.outputs.exe_path }}".Replace(".exe", "_signed.exe")
          & "${{ github.workspace }}/osslsigncode/bin/osslsigncode.exe" verify -in "$signedExePath" -TSA-CAfile DigiCertGlobalRootCA.crt -CAfile cert.pem

      - name: Zip Windows release folder
        id: zip_release
        run: |
          $releaseDir = "${{ steps.find_exe.outputs.release_dir }}"
          $zipPath = "${{ github.workspace }}\Ensound-Windows-Release.zip"
          if (Test-Path $zipPath) { Remove-Item $zipPath -Force }
          Compress-Archive -Path "$releaseDir\*" -DestinationPath $zipPath
          "zip_path=$zipPath" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          
      - name: Upload Windows exe artifact
        uses: actions/upload-artifact@v4
        with:
          name: Ensound Windows Release (zip)
          path: "${{ steps.zip_release.outputs.zip_path }}"

      - name: Upload signed exe (if available)
        if: ${{ secrets.KEY_PEM != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: Ensound Windows exe (signed)
          path: "${{ steps.find_exe.outputs.exe_path }}".Replace(".exe", "_signed.exe")
